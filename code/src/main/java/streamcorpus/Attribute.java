/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package streamcorpus;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Description of an attribute of an entity discovered by a tagger in
 * the text.
 */
public class Attribute implements org.apache.thrift.TBase<Attribute, Attribute._Fields>, java.io.Serializable, Cloneable, Comparable<Attribute> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Attribute");

  private static final org.apache.thrift.protocol.TField ATTRIBUTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("attribute_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EVIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("evidence", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SENTENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence_id", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MENTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mention_id", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AttributeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AttributeTupleSchemeFactory());
  }

  /**
   * The type of the attribute, see documentation for AttributeType
   * 
   * @see AttributeType
   */
  public AttributeType attribute_type; // optional
  /**
   * UTF-8 string that tagger asserts as evidence of an attribute
   */
  public String evidence; // optional
  /**
   * A normalized, strongly typed value derived from the evidence.
   * The actual type must be determined by programmatically
   * interpretint the attribute_type.  For example,
   * attribute_type==AttributeType.PER_GENDER implies that this value
   * will be a string containing an integer index into the Gender
   * enum.
   * 
   * For attribute_type that imply a value of type date-time, the
   * value is a zulu_timestamp string from a StreamTime instance.
   */
  public String value; // optional
  /**
   * Zero-based index into the sentences array for this TaggerID
   */
  public int sentence_id; // optional
  /**
   * Index into the mentions in the document.  This identifies the
   * mention to which the attrribute applies
   */
  public int mention_id; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The type of the attribute, see documentation for AttributeType
     * 
     * @see AttributeType
     */
    ATTRIBUTE_TYPE((short)1, "attribute_type"),
    /**
     * UTF-8 string that tagger asserts as evidence of an attribute
     */
    EVIDENCE((short)2, "evidence"),
    /**
     * A normalized, strongly typed value derived from the evidence.
     * The actual type must be determined by programmatically
     * interpretint the attribute_type.  For example,
     * attribute_type==AttributeType.PER_GENDER implies that this value
     * will be a string containing an integer index into the Gender
     * enum.
     * 
     * For attribute_type that imply a value of type date-time, the
     * value is a zulu_timestamp string from a StreamTime instance.
     */
    VALUE((short)3, "value"),
    /**
     * Zero-based index into the sentences array for this TaggerID
     */
    SENTENCE_ID((short)4, "sentence_id"),
    /**
     * Index into the mentions in the document.  This identifies the
     * mention to which the attrribute applies
     */
    MENTION_ID((short)5, "mention_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTRIBUTE_TYPE
          return ATTRIBUTE_TYPE;
        case 2: // EVIDENCE
          return EVIDENCE;
        case 3: // VALUE
          return VALUE;
        case 4: // SENTENCE_ID
          return SENTENCE_ID;
        case 5: // MENTION_ID
          return MENTION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENTENCE_ID_ISSET_ID = 0;
  private static final int __MENTION_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ATTRIBUTE_TYPE,_Fields.EVIDENCE,_Fields.VALUE,_Fields.SENTENCE_ID,_Fields.MENTION_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTRIBUTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("attribute_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AttributeType.class)));
    tmpMap.put(_Fields.EVIDENCE, new org.apache.thrift.meta_data.FieldMetaData("evidence", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENTENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sentence_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MENTION_ID, new org.apache.thrift.meta_data.FieldMetaData("mention_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "MentionID")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Attribute.class, metaDataMap);
  }

  public Attribute() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Attribute(Attribute other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAttribute_type()) {
      this.attribute_type = other.attribute_type;
    }
    if (other.isSetEvidence()) {
      this.evidence = other.evidence;
    }
    if (other.isSetValue()) {
      this.value = other.value;
    }
    this.sentence_id = other.sentence_id;
    this.mention_id = other.mention_id;
  }

  public Attribute deepCopy() {
    return new Attribute(this);
  }

  @Override
  public void clear() {
    this.attribute_type = null;
    this.evidence = null;
    this.value = null;
    setSentence_idIsSet(false);
    this.sentence_id = 0;
    setMention_idIsSet(false);
    this.mention_id = 0;
  }

  /**
   * The type of the attribute, see documentation for AttributeType
   * 
   * @see AttributeType
   */
  public AttributeType getAttribute_type() {
    return this.attribute_type;
  }

  /**
   * The type of the attribute, see documentation for AttributeType
   * 
   * @see AttributeType
   */
  public Attribute setAttribute_type(AttributeType attribute_type) {
    this.attribute_type = attribute_type;
    return this;
  }

  public void unsetAttribute_type() {
    this.attribute_type = null;
  }

  /** Returns true if field attribute_type is set (has been assigned a value) and false otherwise */
  public boolean isSetAttribute_type() {
    return this.attribute_type != null;
  }

  public void setAttribute_typeIsSet(boolean value) {
    if (!value) {
      this.attribute_type = null;
    }
  }

  /**
   * UTF-8 string that tagger asserts as evidence of an attribute
   */
  public String getEvidence() {
    return this.evidence;
  }

  /**
   * UTF-8 string that tagger asserts as evidence of an attribute
   */
  public Attribute setEvidence(String evidence) {
    this.evidence = evidence;
    return this;
  }

  public void unsetEvidence() {
    this.evidence = null;
  }

  /** Returns true if field evidence is set (has been assigned a value) and false otherwise */
  public boolean isSetEvidence() {
    return this.evidence != null;
  }

  public void setEvidenceIsSet(boolean value) {
    if (!value) {
      this.evidence = null;
    }
  }

  /**
   * A normalized, strongly typed value derived from the evidence.
   * The actual type must be determined by programmatically
   * interpretint the attribute_type.  For example,
   * attribute_type==AttributeType.PER_GENDER implies that this value
   * will be a string containing an integer index into the Gender
   * enum.
   * 
   * For attribute_type that imply a value of type date-time, the
   * value is a zulu_timestamp string from a StreamTime instance.
   */
  public String getValue() {
    return this.value;
  }

  /**
   * A normalized, strongly typed value derived from the evidence.
   * The actual type must be determined by programmatically
   * interpretint the attribute_type.  For example,
   * attribute_type==AttributeType.PER_GENDER implies that this value
   * will be a string containing an integer index into the Gender
   * enum.
   * 
   * For attribute_type that imply a value of type date-time, the
   * value is a zulu_timestamp string from a StreamTime instance.
   */
  public Attribute setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  /**
   * Zero-based index into the sentences array for this TaggerID
   */
  public int getSentence_id() {
    return this.sentence_id;
  }

  /**
   * Zero-based index into the sentences array for this TaggerID
   */
  public Attribute setSentence_id(int sentence_id) {
    this.sentence_id = sentence_id;
    setSentence_idIsSet(true);
    return this;
  }

  public void unsetSentence_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTENCE_ID_ISSET_ID);
  }

  /** Returns true if field sentence_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSentence_id() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTENCE_ID_ISSET_ID);
  }

  public void setSentence_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTENCE_ID_ISSET_ID, value);
  }

  /**
   * Index into the mentions in the document.  This identifies the
   * mention to which the attrribute applies
   */
  public int getMention_id() {
    return this.mention_id;
  }

  /**
   * Index into the mentions in the document.  This identifies the
   * mention to which the attrribute applies
   */
  public Attribute setMention_id(int mention_id) {
    this.mention_id = mention_id;
    setMention_idIsSet(true);
    return this;
  }

  public void unsetMention_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MENTION_ID_ISSET_ID);
  }

  /** Returns true if field mention_id is set (has been assigned a value) and false otherwise */
  public boolean isSetMention_id() {
    return EncodingUtils.testBit(__isset_bitfield, __MENTION_ID_ISSET_ID);
  }

  public void setMention_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MENTION_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTRIBUTE_TYPE:
      if (value == null) {
        unsetAttribute_type();
      } else {
        setAttribute_type((AttributeType)value);
      }
      break;

    case EVIDENCE:
      if (value == null) {
        unsetEvidence();
      } else {
        setEvidence((String)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    case SENTENCE_ID:
      if (value == null) {
        unsetSentence_id();
      } else {
        setSentence_id((Integer)value);
      }
      break;

    case MENTION_ID:
      if (value == null) {
        unsetMention_id();
      } else {
        setMention_id((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTRIBUTE_TYPE:
      return getAttribute_type();

    case EVIDENCE:
      return getEvidence();

    case VALUE:
      return getValue();

    case SENTENCE_ID:
      return Integer.valueOf(getSentence_id());

    case MENTION_ID:
      return Integer.valueOf(getMention_id());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTRIBUTE_TYPE:
      return isSetAttribute_type();
    case EVIDENCE:
      return isSetEvidence();
    case VALUE:
      return isSetValue();
    case SENTENCE_ID:
      return isSetSentence_id();
    case MENTION_ID:
      return isSetMention_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Attribute)
      return this.equals((Attribute)that);
    return false;
  }

  public boolean equals(Attribute that) {
    if (that == null)
      return false;

    boolean this_present_attribute_type = true && this.isSetAttribute_type();
    boolean that_present_attribute_type = true && that.isSetAttribute_type();
    if (this_present_attribute_type || that_present_attribute_type) {
      if (!(this_present_attribute_type && that_present_attribute_type))
        return false;
      if (!this.attribute_type.equals(that.attribute_type))
        return false;
    }

    boolean this_present_evidence = true && this.isSetEvidence();
    boolean that_present_evidence = true && that.isSetEvidence();
    if (this_present_evidence || that_present_evidence) {
      if (!(this_present_evidence && that_present_evidence))
        return false;
      if (!this.evidence.equals(that.evidence))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_sentence_id = true && this.isSetSentence_id();
    boolean that_present_sentence_id = true && that.isSetSentence_id();
    if (this_present_sentence_id || that_present_sentence_id) {
      if (!(this_present_sentence_id && that_present_sentence_id))
        return false;
      if (this.sentence_id != that.sentence_id)
        return false;
    }

    boolean this_present_mention_id = true && this.isSetMention_id();
    boolean that_present_mention_id = true && that.isSetMention_id();
    if (this_present_mention_id || that_present_mention_id) {
      if (!(this_present_mention_id && that_present_mention_id))
        return false;
      if (this.mention_id != that.mention_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Attribute other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttribute_type()).compareTo(other.isSetAttribute_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttribute_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attribute_type, other.attribute_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEvidence()).compareTo(other.isSetEvidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.evidence, other.evidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentence_id()).compareTo(other.isSetSentence_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentence_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentence_id, other.sentence_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMention_id()).compareTo(other.isSetMention_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMention_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mention_id, other.mention_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Attribute(");
    boolean first = true;

    if (isSetAttribute_type()) {
      sb.append("attribute_type:");
      if (this.attribute_type == null) {
        sb.append("null");
      } else {
        sb.append(this.attribute_type);
      }
      first = false;
    }
    if (isSetEvidence()) {
      if (!first) sb.append(", ");
      sb.append("evidence:");
      if (this.evidence == null) {
        sb.append("null");
      } else {
        sb.append(this.evidence);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetSentence_id()) {
      if (!first) sb.append(", ");
      sb.append("sentence_id:");
      sb.append(this.sentence_id);
      first = false;
    }
    if (isSetMention_id()) {
      if (!first) sb.append(", ");
      sb.append("mention_id:");
      sb.append(this.mention_id);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttributeStandardSchemeFactory implements SchemeFactory {
    public AttributeStandardScheme getScheme() {
      return new AttributeStandardScheme();
    }
  }

  private static class AttributeStandardScheme extends StandardScheme<Attribute> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Attribute struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTRIBUTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attribute_type = AttributeType.findByValue(iprot.readI32());
              struct.setAttribute_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.evidence = iprot.readString();
              struct.setEvidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.value = iprot.readString();
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENTENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sentence_id = iprot.readI32();
              struct.setSentence_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MENTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mention_id = iprot.readI32();
              struct.setMention_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Attribute struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attribute_type != null) {
        if (struct.isSetAttribute_type()) {
          oprot.writeFieldBegin(ATTRIBUTE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.attribute_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.evidence != null) {
        if (struct.isSetEvidence()) {
          oprot.writeFieldBegin(EVIDENCE_FIELD_DESC);
          oprot.writeString(struct.evidence);
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSentence_id()) {
        oprot.writeFieldBegin(SENTENCE_ID_FIELD_DESC);
        oprot.writeI32(struct.sentence_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMention_id()) {
        oprot.writeFieldBegin(MENTION_ID_FIELD_DESC);
        oprot.writeI32(struct.mention_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttributeTupleSchemeFactory implements SchemeFactory {
    public AttributeTupleScheme getScheme() {
      return new AttributeTupleScheme();
    }
  }

  private static class AttributeTupleScheme extends TupleScheme<Attribute> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Attribute struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAttribute_type()) {
        optionals.set(0);
      }
      if (struct.isSetEvidence()) {
        optionals.set(1);
      }
      if (struct.isSetValue()) {
        optionals.set(2);
      }
      if (struct.isSetSentence_id()) {
        optionals.set(3);
      }
      if (struct.isSetMention_id()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetAttribute_type()) {
        oprot.writeI32(struct.attribute_type.getValue());
      }
      if (struct.isSetEvidence()) {
        oprot.writeString(struct.evidence);
      }
      if (struct.isSetValue()) {
        oprot.writeString(struct.value);
      }
      if (struct.isSetSentence_id()) {
        oprot.writeI32(struct.sentence_id);
      }
      if (struct.isSetMention_id()) {
        oprot.writeI32(struct.mention_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Attribute struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.attribute_type = AttributeType.findByValue(iprot.readI32());
        struct.setAttribute_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.evidence = iprot.readString();
        struct.setEvidenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.value = iprot.readString();
        struct.setValueIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sentence_id = iprot.readI32();
        struct.setSentence_idIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mention_id = iprot.readI32();
        struct.setMention_idIsSet(true);
      }
    }
  }

}

