/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package streamcorpus;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This is the primary interface to the corpus data.  It is called
 * StreamItem rather than CorpusItem and has a required StreamTime
 * attribute, because even for a static corpus, each document was
 * captured at a particular time in Earth history and might have been
 * different if captured earlier or later.  All corpora are stream
 * corpora, even if they were not explicitly created as such.
 * 
 * stream_id is the unique identifier for documents in the corpus.
 * 
 * This is similar to the StreamItem defined in kba.thrift for TREC
 * KBA 2012, however it removes the 'title' and 'anchor' fields, which
 * can now be represented in other_content.  This means that code that
 * was written to read messages from kba.thrift must be updated.
 */
public class StreamItem implements org.apache.thrift.TBase<StreamItem, StreamItem._Fields>, java.io.Serializable, Cloneable, Comparable<StreamItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StreamItem");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doc_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ABS_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("abs_url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SCHOST_FIELD_DESC = new org.apache.thrift.protocol.TField("schost", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGINAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("original_url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SOURCE_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("source_metadata", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField STREAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_id", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STREAM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("stream_time", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField OTHER_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("other_content", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField RATINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("ratings", org.apache.thrift.protocol.TType.MAP, (short)12);
  private static final org.apache.thrift.protocol.TField EXTERNAL_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("external_ids", org.apache.thrift.protocol.TType.MAP, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StreamItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StreamItemTupleSchemeFactory());
  }

  /**
   * must provide a version number here
   * 
   * @see Versions
   */
  public Versions version; // required
  /**
   * md5 hash of the abs_url
   */
  public String doc_id; // required
  /**
   * normalized form of the original_url, should be a valid URL
   */
  public ByteBuffer abs_url; // optional
  /**
   * scheme://hostname parsed from abs_url
   */
  public String schost; // optional
  /**
   * string obtain from some source.  Only present if not a valid URL,
   * in which case abs_url was derived from original_url
   */
  public ByteBuffer original_url; // optional
  /**
   * string uniquely identifying this data set, should start with a
   * year string, such as 'news' or 'social'
   */
  public String source; // optional
  /**
   * primary content
   */
  public ContentItem body; // optional
  /**
   * see above for explanation of the values that can appear in this
   * dictionary of metadata info from the source.  The string keys in
   * this map should be short, descriptive, and free of whitespace.
   */
  public Map<String,ByteBuffer> source_metadata; // optional
  /**
   * stream_id is actual unique identifier for a StreamItem.  The
   * format is:
   * 
   * stream_id = '%d-%s' % (int(stream_time.epoch_ticks), doc_id)
   */
  public String stream_id; // required
  /**
   * earliest time that this content was known to exist.  Usually,
   * body.raw was also saved at the time of that first observation.
   */
  public StreamTime stream_time; // required
  /**
   * such as title, anchor, extracted, etc.  When present, 'anchor',
   * is a single anchor text of a URL pointing to this doc.  Note that
   * this does not have metadata like the URL of the page that
   * contained this anchor.  Such general link graph data may
   * eventually motivate an extension to this thrift interface.
   */
  public Map<String,ContentItem> other_content; // optional
  /**
   * doc-level judgments relating entire StreamItem to a Target
   */
  public Map<String,List<Rating>> ratings; // optional
  /**
   * doc-level map connecting either doc_id or stream_id (or both) to
   * external identifiers.  This allows external systems to associate
   * record IDs with individual doc_id or stream_id of this document.
   * The keys in the second level map can be either doc_id or
   * stream_id, or possibly other IDs in the future.
   */
  public Map<String,Map<String,String>> external_ids; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * must provide a version number here
     * 
     * @see Versions
     */
    VERSION((short)1, "version"),
    /**
     * md5 hash of the abs_url
     */
    DOC_ID((short)2, "doc_id"),
    /**
     * normalized form of the original_url, should be a valid URL
     */
    ABS_URL((short)3, "abs_url"),
    /**
     * scheme://hostname parsed from abs_url
     */
    SCHOST((short)4, "schost"),
    /**
     * string obtain from some source.  Only present if not a valid URL,
     * in which case abs_url was derived from original_url
     */
    ORIGINAL_URL((short)5, "original_url"),
    /**
     * string uniquely identifying this data set, should start with a
     * year string, such as 'news' or 'social'
     */
    SOURCE((short)6, "source"),
    /**
     * primary content
     */
    BODY((short)7, "body"),
    /**
     * see above for explanation of the values that can appear in this
     * dictionary of metadata info from the source.  The string keys in
     * this map should be short, descriptive, and free of whitespace.
     */
    SOURCE_METADATA((short)8, "source_metadata"),
    /**
     * stream_id is actual unique identifier for a StreamItem.  The
     * format is:
     * 
     * stream_id = '%d-%s' % (int(stream_time.epoch_ticks), doc_id)
     */
    STREAM_ID((short)9, "stream_id"),
    /**
     * earliest time that this content was known to exist.  Usually,
     * body.raw was also saved at the time of that first observation.
     */
    STREAM_TIME((short)10, "stream_time"),
    /**
     * such as title, anchor, extracted, etc.  When present, 'anchor',
     * is a single anchor text of a URL pointing to this doc.  Note that
     * this does not have metadata like the URL of the page that
     * contained this anchor.  Such general link graph data may
     * eventually motivate an extension to this thrift interface.
     */
    OTHER_CONTENT((short)11, "other_content"),
    /**
     * doc-level judgments relating entire StreamItem to a Target
     */
    RATINGS((short)12, "ratings"),
    /**
     * doc-level map connecting either doc_id or stream_id (or both) to
     * external identifiers.  This allows external systems to associate
     * record IDs with individual doc_id or stream_id of this document.
     * The keys in the second level map can be either doc_id or
     * stream_id, or possibly other IDs in the future.
     */
    EXTERNAL_IDS((short)14, "external_ids");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // DOC_ID
          return DOC_ID;
        case 3: // ABS_URL
          return ABS_URL;
        case 4: // SCHOST
          return SCHOST;
        case 5: // ORIGINAL_URL
          return ORIGINAL_URL;
        case 6: // SOURCE
          return SOURCE;
        case 7: // BODY
          return BODY;
        case 8: // SOURCE_METADATA
          return SOURCE_METADATA;
        case 9: // STREAM_ID
          return STREAM_ID;
        case 10: // STREAM_TIME
          return STREAM_TIME;
        case 11: // OTHER_CONTENT
          return OTHER_CONTENT;
        case 12: // RATINGS
          return RATINGS;
        case 14: // EXTERNAL_IDS
          return EXTERNAL_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ABS_URL,_Fields.SCHOST,_Fields.ORIGINAL_URL,_Fields.SOURCE,_Fields.BODY,_Fields.SOURCE_METADATA,_Fields.OTHER_CONTENT,_Fields.RATINGS,_Fields.EXTERNAL_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Versions.class)));
    tmpMap.put(_Fields.DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("doc_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ABS_URL, new org.apache.thrift.meta_data.FieldMetaData("abs_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SCHOST, new org.apache.thrift.meta_data.FieldMetaData("schost", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_URL, new org.apache.thrift.meta_data.FieldMetaData("original_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentItem.class)));
    tmpMap.put(_Fields.SOURCE_METADATA, new org.apache.thrift.meta_data.FieldMetaData("source_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "SourceMetadata"))));
    tmpMap.put(_Fields.STREAM_ID, new org.apache.thrift.meta_data.FieldMetaData("stream_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STREAM_TIME, new org.apache.thrift.meta_data.FieldMetaData("stream_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StreamTime.class)));
    tmpMap.put(_Fields.OTHER_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("other_content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ContentItem.class))));
    tmpMap.put(_Fields.RATINGS, new org.apache.thrift.meta_data.FieldMetaData("ratings", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "AnnotatorID"), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Rating.class)))));
    tmpMap.put(_Fields.EXTERNAL_IDS, new org.apache.thrift.meta_data.FieldMetaData("external_ids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "SystemID"), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING                , "DocIDorStreamID"), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamItem.class, metaDataMap);
  }

  public StreamItem() {
    this.version = streamcorpus.Versions.v0_3_0;

    this.source_metadata = new HashMap<String,ByteBuffer>();

    this.other_content = new HashMap<String,ContentItem>();

    this.ratings = new HashMap<String,List<Rating>>();

    this.external_ids = new HashMap<String,Map<String,String>>();

  }

  public StreamItem(
    Versions version,
    String doc_id,
    String stream_id,
    StreamTime stream_time)
  {
    this();
    this.version = version;
    this.doc_id = doc_id;
    this.stream_id = stream_id;
    this.stream_time = stream_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamItem(StreamItem other) {
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetDoc_id()) {
      this.doc_id = other.doc_id;
    }
    if (other.isSetAbs_url()) {
      this.abs_url = org.apache.thrift.TBaseHelper.copyBinary(other.abs_url);
;
    }
    if (other.isSetSchost()) {
      this.schost = other.schost;
    }
    if (other.isSetOriginal_url()) {
      this.original_url = org.apache.thrift.TBaseHelper.copyBinary(other.original_url);
;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    if (other.isSetBody()) {
      this.body = new ContentItem(other.body);
    }
    if (other.isSetSource_metadata()) {
      Map<String,ByteBuffer> __this__source_metadata = new HashMap<String,ByteBuffer>();
      for (Map.Entry<String, ByteBuffer> other_element : other.source_metadata.entrySet()) {

        String other_element_key = other_element.getKey();
        ByteBuffer other_element_value = other_element.getValue();

        String __this__source_metadata_copy_key = other_element_key;

        ByteBuffer __this__source_metadata_copy_value = other_element_value;

        __this__source_metadata.put(__this__source_metadata_copy_key, __this__source_metadata_copy_value);
      }
      this.source_metadata = __this__source_metadata;
    }
    if (other.isSetStream_id()) {
      this.stream_id = other.stream_id;
    }
    if (other.isSetStream_time()) {
      this.stream_time = new StreamTime(other.stream_time);
    }
    if (other.isSetOther_content()) {
      Map<String,ContentItem> __this__other_content = new HashMap<String,ContentItem>();
      for (Map.Entry<String, ContentItem> other_element : other.other_content.entrySet()) {

        String other_element_key = other_element.getKey();
        ContentItem other_element_value = other_element.getValue();

        String __this__other_content_copy_key = other_element_key;

        ContentItem __this__other_content_copy_value = new ContentItem(other_element_value);

        __this__other_content.put(__this__other_content_copy_key, __this__other_content_copy_value);
      }
      this.other_content = __this__other_content;
    }
    if (other.isSetRatings()) {
      Map<String,List<Rating>> __this__ratings = new HashMap<String,List<Rating>>();
      for (Map.Entry<String, List<Rating>> other_element : other.ratings.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Rating> other_element_value = other_element.getValue();

        String __this__ratings_copy_key = other_element_key;

        List<Rating> __this__ratings_copy_value = new ArrayList<Rating>();
        for (Rating other_element_value_element : other_element_value) {
          __this__ratings_copy_value.add(new Rating(other_element_value_element));
        }

        __this__ratings.put(__this__ratings_copy_key, __this__ratings_copy_value);
      }
      this.ratings = __this__ratings;
    }
    if (other.isSetExternal_ids()) {
      Map<String,Map<String,String>> __this__external_ids = new HashMap<String,Map<String,String>>();
      for (Map.Entry<String, Map<String,String>> other_element : other.external_ids.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,String> other_element_value = other_element.getValue();

        String __this__external_ids_copy_key = other_element_key;

        Map<String,String> __this__external_ids_copy_value = new HashMap<String,String>();
        for (Map.Entry<String, String> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          String other_element_value_element_value = other_element_value_element.getValue();

          String __this__external_ids_copy_value_copy_key = other_element_value_element_key;

          String __this__external_ids_copy_value_copy_value = other_element_value_element_value;

          __this__external_ids_copy_value.put(__this__external_ids_copy_value_copy_key, __this__external_ids_copy_value_copy_value);
        }

        __this__external_ids.put(__this__external_ids_copy_key, __this__external_ids_copy_value);
      }
      this.external_ids = __this__external_ids;
    }
  }

  public StreamItem deepCopy() {
    return new StreamItem(this);
  }

  @Override
  public void clear() {
    this.version = streamcorpus.Versions.v0_3_0;

    this.doc_id = null;
    this.abs_url = null;
    this.schost = null;
    this.original_url = null;
    this.source = null;
    this.body = null;
    this.source_metadata = new HashMap<String,ByteBuffer>();

    this.stream_id = null;
    this.stream_time = null;
    this.other_content = new HashMap<String,ContentItem>();

    this.ratings = new HashMap<String,List<Rating>>();

    this.external_ids = new HashMap<String,Map<String,String>>();

  }

  /**
   * must provide a version number here
   * 
   * @see Versions
   */
  public Versions getVersion() {
    return this.version;
  }

  /**
   * must provide a version number here
   * 
   * @see Versions
   */
  public StreamItem setVersion(Versions version) {
    this.version = version;
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  /**
   * md5 hash of the abs_url
   */
  public String getDoc_id() {
    return this.doc_id;
  }

  /**
   * md5 hash of the abs_url
   */
  public StreamItem setDoc_id(String doc_id) {
    this.doc_id = doc_id;
    return this;
  }

  public void unsetDoc_id() {
    this.doc_id = null;
  }

  /** Returns true if field doc_id is set (has been assigned a value) and false otherwise */
  public boolean isSetDoc_id() {
    return this.doc_id != null;
  }

  public void setDoc_idIsSet(boolean value) {
    if (!value) {
      this.doc_id = null;
    }
  }

  /**
   * normalized form of the original_url, should be a valid URL
   */
  public byte[] getAbs_url() {
    setAbs_url(org.apache.thrift.TBaseHelper.rightSize(abs_url));
    return abs_url == null ? null : abs_url.array();
  }

  public ByteBuffer bufferForAbs_url() {
    return abs_url;
  }

  /**
   * normalized form of the original_url, should be a valid URL
   */
  public StreamItem setAbs_url(byte[] abs_url) {
    setAbs_url(abs_url == null ? (ByteBuffer)null : ByteBuffer.wrap(abs_url));
    return this;
  }

  public StreamItem setAbs_url(ByteBuffer abs_url) {
    this.abs_url = abs_url;
    return this;
  }

  public void unsetAbs_url() {
    this.abs_url = null;
  }

  /** Returns true if field abs_url is set (has been assigned a value) and false otherwise */
  public boolean isSetAbs_url() {
    return this.abs_url != null;
  }

  public void setAbs_urlIsSet(boolean value) {
    if (!value) {
      this.abs_url = null;
    }
  }

  /**
   * scheme://hostname parsed from abs_url
   */
  public String getSchost() {
    return this.schost;
  }

  /**
   * scheme://hostname parsed from abs_url
   */
  public StreamItem setSchost(String schost) {
    this.schost = schost;
    return this;
  }

  public void unsetSchost() {
    this.schost = null;
  }

  /** Returns true if field schost is set (has been assigned a value) and false otherwise */
  public boolean isSetSchost() {
    return this.schost != null;
  }

  public void setSchostIsSet(boolean value) {
    if (!value) {
      this.schost = null;
    }
  }

  /**
   * string obtain from some source.  Only present if not a valid URL,
   * in which case abs_url was derived from original_url
   */
  public byte[] getOriginal_url() {
    setOriginal_url(org.apache.thrift.TBaseHelper.rightSize(original_url));
    return original_url == null ? null : original_url.array();
  }

  public ByteBuffer bufferForOriginal_url() {
    return original_url;
  }

  /**
   * string obtain from some source.  Only present if not a valid URL,
   * in which case abs_url was derived from original_url
   */
  public StreamItem setOriginal_url(byte[] original_url) {
    setOriginal_url(original_url == null ? (ByteBuffer)null : ByteBuffer.wrap(original_url));
    return this;
  }

  public StreamItem setOriginal_url(ByteBuffer original_url) {
    this.original_url = original_url;
    return this;
  }

  public void unsetOriginal_url() {
    this.original_url = null;
  }

  /** Returns true if field original_url is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginal_url() {
    return this.original_url != null;
  }

  public void setOriginal_urlIsSet(boolean value) {
    if (!value) {
      this.original_url = null;
    }
  }

  /**
   * string uniquely identifying this data set, should start with a
   * year string, such as 'news' or 'social'
   */
  public String getSource() {
    return this.source;
  }

  /**
   * string uniquely identifying this data set, should start with a
   * year string, such as 'news' or 'social'
   */
  public StreamItem setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  /**
   * primary content
   */
  public ContentItem getBody() {
    return this.body;
  }

  /**
   * primary content
   */
  public StreamItem setBody(ContentItem body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int getSource_metadataSize() {
    return (this.source_metadata == null) ? 0 : this.source_metadata.size();
  }

  public void putToSource_metadata(String key, ByteBuffer val) {
    if (this.source_metadata == null) {
      this.source_metadata = new HashMap<String,ByteBuffer>();
    }
    this.source_metadata.put(key, val);
  }

  /**
   * see above for explanation of the values that can appear in this
   * dictionary of metadata info from the source.  The string keys in
   * this map should be short, descriptive, and free of whitespace.
   */
  public Map<String,ByteBuffer> getSource_metadata() {
    return this.source_metadata;
  }

  /**
   * see above for explanation of the values that can appear in this
   * dictionary of metadata info from the source.  The string keys in
   * this map should be short, descriptive, and free of whitespace.
   */
  public StreamItem setSource_metadata(Map<String,ByteBuffer> source_metadata) {
    this.source_metadata = source_metadata;
    return this;
  }

  public void unsetSource_metadata() {
    this.source_metadata = null;
  }

  /** Returns true if field source_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetSource_metadata() {
    return this.source_metadata != null;
  }

  public void setSource_metadataIsSet(boolean value) {
    if (!value) {
      this.source_metadata = null;
    }
  }

  /**
   * stream_id is actual unique identifier for a StreamItem.  The
   * format is:
   * 
   * stream_id = '%d-%s' % (int(stream_time.epoch_ticks), doc_id)
   */
  public String getStream_id() {
    return this.stream_id;
  }

  /**
   * stream_id is actual unique identifier for a StreamItem.  The
   * format is:
   * 
   * stream_id = '%d-%s' % (int(stream_time.epoch_ticks), doc_id)
   */
  public StreamItem setStream_id(String stream_id) {
    this.stream_id = stream_id;
    return this;
  }

  public void unsetStream_id() {
    this.stream_id = null;
  }

  /** Returns true if field stream_id is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_id() {
    return this.stream_id != null;
  }

  public void setStream_idIsSet(boolean value) {
    if (!value) {
      this.stream_id = null;
    }
  }

  /**
   * earliest time that this content was known to exist.  Usually,
   * body.raw was also saved at the time of that first observation.
   */
  public StreamTime getStream_time() {
    return this.stream_time;
  }

  /**
   * earliest time that this content was known to exist.  Usually,
   * body.raw was also saved at the time of that first observation.
   */
  public StreamItem setStream_time(StreamTime stream_time) {
    this.stream_time = stream_time;
    return this;
  }

  public void unsetStream_time() {
    this.stream_time = null;
  }

  /** Returns true if field stream_time is set (has been assigned a value) and false otherwise */
  public boolean isSetStream_time() {
    return this.stream_time != null;
  }

  public void setStream_timeIsSet(boolean value) {
    if (!value) {
      this.stream_time = null;
    }
  }

  public int getOther_contentSize() {
    return (this.other_content == null) ? 0 : this.other_content.size();
  }

  public void putToOther_content(String key, ContentItem val) {
    if (this.other_content == null) {
      this.other_content = new HashMap<String,ContentItem>();
    }
    this.other_content.put(key, val);
  }

  /**
   * such as title, anchor, extracted, etc.  When present, 'anchor',
   * is a single anchor text of a URL pointing to this doc.  Note that
   * this does not have metadata like the URL of the page that
   * contained this anchor.  Such general link graph data may
   * eventually motivate an extension to this thrift interface.
   */
  public Map<String,ContentItem> getOther_content() {
    return this.other_content;
  }

  /**
   * such as title, anchor, extracted, etc.  When present, 'anchor',
   * is a single anchor text of a URL pointing to this doc.  Note that
   * this does not have metadata like the URL of the page that
   * contained this anchor.  Such general link graph data may
   * eventually motivate an extension to this thrift interface.
   */
  public StreamItem setOther_content(Map<String,ContentItem> other_content) {
    this.other_content = other_content;
    return this;
  }

  public void unsetOther_content() {
    this.other_content = null;
  }

  /** Returns true if field other_content is set (has been assigned a value) and false otherwise */
  public boolean isSetOther_content() {
    return this.other_content != null;
  }

  public void setOther_contentIsSet(boolean value) {
    if (!value) {
      this.other_content = null;
    }
  }

  public int getRatingsSize() {
    return (this.ratings == null) ? 0 : this.ratings.size();
  }

  public void putToRatings(String key, List<Rating> val) {
    if (this.ratings == null) {
      this.ratings = new HashMap<String,List<Rating>>();
    }
    this.ratings.put(key, val);
  }

  /**
   * doc-level judgments relating entire StreamItem to a Target
   */
  public Map<String,List<Rating>> getRatings() {
    return this.ratings;
  }

  /**
   * doc-level judgments relating entire StreamItem to a Target
   */
  public StreamItem setRatings(Map<String,List<Rating>> ratings) {
    this.ratings = ratings;
    return this;
  }

  public void unsetRatings() {
    this.ratings = null;
  }

  /** Returns true if field ratings is set (has been assigned a value) and false otherwise */
  public boolean isSetRatings() {
    return this.ratings != null;
  }

  public void setRatingsIsSet(boolean value) {
    if (!value) {
      this.ratings = null;
    }
  }

  public int getExternal_idsSize() {
    return (this.external_ids == null) ? 0 : this.external_ids.size();
  }

  public void putToExternal_ids(String key, Map<String,String> val) {
    if (this.external_ids == null) {
      this.external_ids = new HashMap<String,Map<String,String>>();
    }
    this.external_ids.put(key, val);
  }

  /**
   * doc-level map connecting either doc_id or stream_id (or both) to
   * external identifiers.  This allows external systems to associate
   * record IDs with individual doc_id or stream_id of this document.
   * The keys in the second level map can be either doc_id or
   * stream_id, or possibly other IDs in the future.
   */
  public Map<String,Map<String,String>> getExternal_ids() {
    return this.external_ids;
  }

  /**
   * doc-level map connecting either doc_id or stream_id (or both) to
   * external identifiers.  This allows external systems to associate
   * record IDs with individual doc_id or stream_id of this document.
   * The keys in the second level map can be either doc_id or
   * stream_id, or possibly other IDs in the future.
   */
  public StreamItem setExternal_ids(Map<String,Map<String,String>> external_ids) {
    this.external_ids = external_ids;
    return this;
  }

  public void unsetExternal_ids() {
    this.external_ids = null;
  }

  /** Returns true if field external_ids is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_ids() {
    return this.external_ids != null;
  }

  public void setExternal_idsIsSet(boolean value) {
    if (!value) {
      this.external_ids = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Versions)value);
      }
      break;

    case DOC_ID:
      if (value == null) {
        unsetDoc_id();
      } else {
        setDoc_id((String)value);
      }
      break;

    case ABS_URL:
      if (value == null) {
        unsetAbs_url();
      } else {
        setAbs_url((ByteBuffer)value);
      }
      break;

    case SCHOST:
      if (value == null) {
        unsetSchost();
      } else {
        setSchost((String)value);
      }
      break;

    case ORIGINAL_URL:
      if (value == null) {
        unsetOriginal_url();
      } else {
        setOriginal_url((ByteBuffer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((ContentItem)value);
      }
      break;

    case SOURCE_METADATA:
      if (value == null) {
        unsetSource_metadata();
      } else {
        setSource_metadata((Map<String,ByteBuffer>)value);
      }
      break;

    case STREAM_ID:
      if (value == null) {
        unsetStream_id();
      } else {
        setStream_id((String)value);
      }
      break;

    case STREAM_TIME:
      if (value == null) {
        unsetStream_time();
      } else {
        setStream_time((StreamTime)value);
      }
      break;

    case OTHER_CONTENT:
      if (value == null) {
        unsetOther_content();
      } else {
        setOther_content((Map<String,ContentItem>)value);
      }
      break;

    case RATINGS:
      if (value == null) {
        unsetRatings();
      } else {
        setRatings((Map<String,List<Rating>>)value);
      }
      break;

    case EXTERNAL_IDS:
      if (value == null) {
        unsetExternal_ids();
      } else {
        setExternal_ids((Map<String,Map<String,String>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return getVersion();

    case DOC_ID:
      return getDoc_id();

    case ABS_URL:
      return getAbs_url();

    case SCHOST:
      return getSchost();

    case ORIGINAL_URL:
      return getOriginal_url();

    case SOURCE:
      return getSource();

    case BODY:
      return getBody();

    case SOURCE_METADATA:
      return getSource_metadata();

    case STREAM_ID:
      return getStream_id();

    case STREAM_TIME:
      return getStream_time();

    case OTHER_CONTENT:
      return getOther_content();

    case RATINGS:
      return getRatings();

    case EXTERNAL_IDS:
      return getExternal_ids();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case DOC_ID:
      return isSetDoc_id();
    case ABS_URL:
      return isSetAbs_url();
    case SCHOST:
      return isSetSchost();
    case ORIGINAL_URL:
      return isSetOriginal_url();
    case SOURCE:
      return isSetSource();
    case BODY:
      return isSetBody();
    case SOURCE_METADATA:
      return isSetSource_metadata();
    case STREAM_ID:
      return isSetStream_id();
    case STREAM_TIME:
      return isSetStream_time();
    case OTHER_CONTENT:
      return isSetOther_content();
    case RATINGS:
      return isSetRatings();
    case EXTERNAL_IDS:
      return isSetExternal_ids();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamItem)
      return this.equals((StreamItem)that);
    return false;
  }

  public boolean equals(StreamItem that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_doc_id = true && this.isSetDoc_id();
    boolean that_present_doc_id = true && that.isSetDoc_id();
    if (this_present_doc_id || that_present_doc_id) {
      if (!(this_present_doc_id && that_present_doc_id))
        return false;
      if (!this.doc_id.equals(that.doc_id))
        return false;
    }

    boolean this_present_abs_url = true && this.isSetAbs_url();
    boolean that_present_abs_url = true && that.isSetAbs_url();
    if (this_present_abs_url || that_present_abs_url) {
      if (!(this_present_abs_url && that_present_abs_url))
        return false;
      if (!this.abs_url.equals(that.abs_url))
        return false;
    }

    boolean this_present_schost = true && this.isSetSchost();
    boolean that_present_schost = true && that.isSetSchost();
    if (this_present_schost || that_present_schost) {
      if (!(this_present_schost && that_present_schost))
        return false;
      if (!this.schost.equals(that.schost))
        return false;
    }

    boolean this_present_original_url = true && this.isSetOriginal_url();
    boolean that_present_original_url = true && that.isSetOriginal_url();
    if (this_present_original_url || that_present_original_url) {
      if (!(this_present_original_url && that_present_original_url))
        return false;
      if (!this.original_url.equals(that.original_url))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_source_metadata = true && this.isSetSource_metadata();
    boolean that_present_source_metadata = true && that.isSetSource_metadata();
    if (this_present_source_metadata || that_present_source_metadata) {
      if (!(this_present_source_metadata && that_present_source_metadata))
        return false;
      if (!this.source_metadata.equals(that.source_metadata))
        return false;
    }

    boolean this_present_stream_id = true && this.isSetStream_id();
    boolean that_present_stream_id = true && that.isSetStream_id();
    if (this_present_stream_id || that_present_stream_id) {
      if (!(this_present_stream_id && that_present_stream_id))
        return false;
      if (!this.stream_id.equals(that.stream_id))
        return false;
    }

    boolean this_present_stream_time = true && this.isSetStream_time();
    boolean that_present_stream_time = true && that.isSetStream_time();
    if (this_present_stream_time || that_present_stream_time) {
      if (!(this_present_stream_time && that_present_stream_time))
        return false;
      if (!this.stream_time.equals(that.stream_time))
        return false;
    }

    boolean this_present_other_content = true && this.isSetOther_content();
    boolean that_present_other_content = true && that.isSetOther_content();
    if (this_present_other_content || that_present_other_content) {
      if (!(this_present_other_content && that_present_other_content))
        return false;
      if (!this.other_content.equals(that.other_content))
        return false;
    }

    boolean this_present_ratings = true && this.isSetRatings();
    boolean that_present_ratings = true && that.isSetRatings();
    if (this_present_ratings || that_present_ratings) {
      if (!(this_present_ratings && that_present_ratings))
        return false;
      if (!this.ratings.equals(that.ratings))
        return false;
    }

    boolean this_present_external_ids = true && this.isSetExternal_ids();
    boolean that_present_external_ids = true && that.isSetExternal_ids();
    if (this_present_external_ids || that_present_external_ids) {
      if (!(this_present_external_ids && that_present_external_ids))
        return false;
      if (!this.external_ids.equals(that.external_ids))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StreamItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoc_id()).compareTo(other.isSetDoc_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoc_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doc_id, other.doc_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAbs_url()).compareTo(other.isSetAbs_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbs_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abs_url, other.abs_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchost()).compareTo(other.isSetSchost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schost, other.schost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginal_url()).compareTo(other.isSetOriginal_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginal_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.original_url, other.original_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource_metadata()).compareTo(other.isSetSource_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source_metadata, other.source_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStream_id()).compareTo(other.isSetStream_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_id, other.stream_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStream_time()).compareTo(other.isSetStream_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStream_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stream_time, other.stream_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOther_content()).compareTo(other.isSetOther_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOther_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.other_content, other.other_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatings()).compareTo(other.isSetRatings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratings, other.ratings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_ids()).compareTo(other.isSetExternal_ids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_ids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_ids, other.external_ids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StreamItem(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doc_id:");
    if (this.doc_id == null) {
      sb.append("null");
    } else {
      sb.append(this.doc_id);
    }
    first = false;
    if (isSetAbs_url()) {
      if (!first) sb.append(", ");
      sb.append("abs_url:");
      if (this.abs_url == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.abs_url, sb);
      }
      first = false;
    }
    if (isSetSchost()) {
      if (!first) sb.append(", ");
      sb.append("schost:");
      if (this.schost == null) {
        sb.append("null");
      } else {
        sb.append(this.schost);
      }
      first = false;
    }
    if (isSetOriginal_url()) {
      if (!first) sb.append(", ");
      sb.append("original_url:");
      if (this.original_url == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.original_url, sb);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetBody()) {
      if (!first) sb.append(", ");
      sb.append("body:");
      if (this.body == null) {
        sb.append("null");
      } else {
        sb.append(this.body);
      }
      first = false;
    }
    if (isSetSource_metadata()) {
      if (!first) sb.append(", ");
      sb.append("source_metadata:");
      if (this.source_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.source_metadata);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("stream_id:");
    if (this.stream_id == null) {
      sb.append("null");
    } else {
      sb.append(this.stream_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stream_time:");
    if (this.stream_time == null) {
      sb.append("null");
    } else {
      sb.append(this.stream_time);
    }
    first = false;
    if (isSetOther_content()) {
      if (!first) sb.append(", ");
      sb.append("other_content:");
      if (this.other_content == null) {
        sb.append("null");
      } else {
        sb.append(this.other_content);
      }
      first = false;
    }
    if (isSetRatings()) {
      if (!first) sb.append(", ");
      sb.append("ratings:");
      if (this.ratings == null) {
        sb.append("null");
      } else {
        sb.append(this.ratings);
      }
      first = false;
    }
    if (isSetExternal_ids()) {
      if (!first) sb.append(", ");
      sb.append("external_ids:");
      if (this.external_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.external_ids);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (body != null) {
      body.validate();
    }
    if (stream_time != null) {
      stream_time.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamItemStandardSchemeFactory implements SchemeFactory {
    public StreamItemStandardScheme getScheme() {
      return new StreamItemStandardScheme();
    }
  }

  private static class StreamItemStandardScheme extends StandardScheme<StreamItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StreamItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = Versions.findByValue(iprot.readI32());
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doc_id = iprot.readString();
              struct.setDoc_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ABS_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.abs_url = iprot.readBinary();
              struct.setAbs_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SCHOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.schost = iprot.readString();
              struct.setSchostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORIGINAL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.original_url = iprot.readBinary();
              struct.setOriginal_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.body = new ContentItem();
              struct.body.read(iprot);
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SOURCE_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                struct.source_metadata = new HashMap<String,ByteBuffer>(2*_map192.size);
                for (int _i193 = 0; _i193 < _map192.size; ++_i193)
                {
                  String _key194;
                  ByteBuffer _val195;
                  _key194 = iprot.readString();
                  _val195 = iprot.readBinary();
                  struct.source_metadata.put(_key194, _val195);
                }
                iprot.readMapEnd();
              }
              struct.setSource_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STREAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stream_id = iprot.readString();
              struct.setStream_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STREAM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stream_time = new StreamTime();
              struct.stream_time.read(iprot);
              struct.setStream_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OTHER_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map196 = iprot.readMapBegin();
                struct.other_content = new HashMap<String,ContentItem>(2*_map196.size);
                for (int _i197 = 0; _i197 < _map196.size; ++_i197)
                {
                  String _key198;
                  ContentItem _val199;
                  _key198 = iprot.readString();
                  _val199 = new ContentItem();
                  _val199.read(iprot);
                  struct.other_content.put(_key198, _val199);
                }
                iprot.readMapEnd();
              }
              struct.setOther_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RATINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                struct.ratings = new HashMap<String,List<Rating>>(2*_map200.size);
                for (int _i201 = 0; _i201 < _map200.size; ++_i201)
                {
                  String _key202;
                  List<Rating> _val203;
                  _key202 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                    _val203 = new ArrayList<Rating>(_list204.size);
                    for (int _i205 = 0; _i205 < _list204.size; ++_i205)
                    {
                      Rating _elem206;
                      _elem206 = new Rating();
                      _elem206.read(iprot);
                      _val203.add(_elem206);
                    }
                    iprot.readListEnd();
                  }
                  struct.ratings.put(_key202, _val203);
                }
                iprot.readMapEnd();
              }
              struct.setRatingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTERNAL_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map207 = iprot.readMapBegin();
                struct.external_ids = new HashMap<String,Map<String,String>>(2*_map207.size);
                for (int _i208 = 0; _i208 < _map207.size; ++_i208)
                {
                  String _key209;
                  Map<String,String> _val210;
                  _key209 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map211 = iprot.readMapBegin();
                    _val210 = new HashMap<String,String>(2*_map211.size);
                    for (int _i212 = 0; _i212 < _map211.size; ++_i212)
                    {
                      String _key213;
                      String _val214;
                      _key213 = iprot.readString();
                      _val214 = iprot.readString();
                      _val210.put(_key213, _val214);
                    }
                    iprot.readMapEnd();
                  }
                  struct.external_ids.put(_key209, _val210);
                }
                iprot.readMapEnd();
              }
              struct.setExternal_idsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StreamItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.version != null) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.doc_id != null) {
        oprot.writeFieldBegin(DOC_ID_FIELD_DESC);
        oprot.writeString(struct.doc_id);
        oprot.writeFieldEnd();
      }
      if (struct.abs_url != null) {
        if (struct.isSetAbs_url()) {
          oprot.writeFieldBegin(ABS_URL_FIELD_DESC);
          oprot.writeBinary(struct.abs_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.schost != null) {
        if (struct.isSetSchost()) {
          oprot.writeFieldBegin(SCHOST_FIELD_DESC);
          oprot.writeString(struct.schost);
          oprot.writeFieldEnd();
        }
      }
      if (struct.original_url != null) {
        if (struct.isSetOriginal_url()) {
          oprot.writeFieldBegin(ORIGINAL_URL_FIELD_DESC);
          oprot.writeBinary(struct.original_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.body != null) {
        if (struct.isSetBody()) {
          oprot.writeFieldBegin(BODY_FIELD_DESC);
          struct.body.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.source_metadata != null) {
        if (struct.isSetSource_metadata()) {
          oprot.writeFieldBegin(SOURCE_METADATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.source_metadata.size()));
            for (Map.Entry<String, ByteBuffer> _iter215 : struct.source_metadata.entrySet())
            {
              oprot.writeString(_iter215.getKey());
              oprot.writeBinary(_iter215.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stream_id != null) {
        oprot.writeFieldBegin(STREAM_ID_FIELD_DESC);
        oprot.writeString(struct.stream_id);
        oprot.writeFieldEnd();
      }
      if (struct.stream_time != null) {
        oprot.writeFieldBegin(STREAM_TIME_FIELD_DESC);
        struct.stream_time.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.other_content != null) {
        if (struct.isSetOther_content()) {
          oprot.writeFieldBegin(OTHER_CONTENT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.other_content.size()));
            for (Map.Entry<String, ContentItem> _iter216 : struct.other_content.entrySet())
            {
              oprot.writeString(_iter216.getKey());
              _iter216.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ratings != null) {
        if (struct.isSetRatings()) {
          oprot.writeFieldBegin(RATINGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.ratings.size()));
            for (Map.Entry<String, List<Rating>> _iter217 : struct.ratings.entrySet())
            {
              oprot.writeString(_iter217.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter217.getValue().size()));
                for (Rating _iter218 : _iter217.getValue())
                {
                  _iter218.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.external_ids != null) {
        if (struct.isSetExternal_ids()) {
          oprot.writeFieldBegin(EXTERNAL_IDS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.external_ids.size()));
            for (Map.Entry<String, Map<String,String>> _iter219 : struct.external_ids.entrySet())
            {
              oprot.writeString(_iter219.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter219.getValue().size()));
                for (Map.Entry<String, String> _iter220 : _iter219.getValue().entrySet())
                {
                  oprot.writeString(_iter220.getKey());
                  oprot.writeString(_iter220.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamItemTupleSchemeFactory implements SchemeFactory {
    public StreamItemTupleScheme getScheme() {
      return new StreamItemTupleScheme();
    }
  }

  private static class StreamItemTupleScheme extends TupleScheme<StreamItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StreamItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetDoc_id()) {
        optionals.set(1);
      }
      if (struct.isSetAbs_url()) {
        optionals.set(2);
      }
      if (struct.isSetSchost()) {
        optionals.set(3);
      }
      if (struct.isSetOriginal_url()) {
        optionals.set(4);
      }
      if (struct.isSetSource()) {
        optionals.set(5);
      }
      if (struct.isSetBody()) {
        optionals.set(6);
      }
      if (struct.isSetSource_metadata()) {
        optionals.set(7);
      }
      if (struct.isSetStream_id()) {
        optionals.set(8);
      }
      if (struct.isSetStream_time()) {
        optionals.set(9);
      }
      if (struct.isSetOther_content()) {
        optionals.set(10);
      }
      if (struct.isSetRatings()) {
        optionals.set(11);
      }
      if (struct.isSetExternal_ids()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version.getValue());
      }
      if (struct.isSetDoc_id()) {
        oprot.writeString(struct.doc_id);
      }
      if (struct.isSetAbs_url()) {
        oprot.writeBinary(struct.abs_url);
      }
      if (struct.isSetSchost()) {
        oprot.writeString(struct.schost);
      }
      if (struct.isSetOriginal_url()) {
        oprot.writeBinary(struct.original_url);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetBody()) {
        struct.body.write(oprot);
      }
      if (struct.isSetSource_metadata()) {
        {
          oprot.writeI32(struct.source_metadata.size());
          for (Map.Entry<String, ByteBuffer> _iter221 : struct.source_metadata.entrySet())
          {
            oprot.writeString(_iter221.getKey());
            oprot.writeBinary(_iter221.getValue());
          }
        }
      }
      if (struct.isSetStream_id()) {
        oprot.writeString(struct.stream_id);
      }
      if (struct.isSetStream_time()) {
        struct.stream_time.write(oprot);
      }
      if (struct.isSetOther_content()) {
        {
          oprot.writeI32(struct.other_content.size());
          for (Map.Entry<String, ContentItem> _iter222 : struct.other_content.entrySet())
          {
            oprot.writeString(_iter222.getKey());
            _iter222.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetRatings()) {
        {
          oprot.writeI32(struct.ratings.size());
          for (Map.Entry<String, List<Rating>> _iter223 : struct.ratings.entrySet())
          {
            oprot.writeString(_iter223.getKey());
            {
              oprot.writeI32(_iter223.getValue().size());
              for (Rating _iter224 : _iter223.getValue())
              {
                _iter224.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetExternal_ids()) {
        {
          oprot.writeI32(struct.external_ids.size());
          for (Map.Entry<String, Map<String,String>> _iter225 : struct.external_ids.entrySet())
          {
            oprot.writeString(_iter225.getKey());
            {
              oprot.writeI32(_iter225.getValue().size());
              for (Map.Entry<String, String> _iter226 : _iter225.getValue().entrySet())
              {
                oprot.writeString(_iter226.getKey());
                oprot.writeString(_iter226.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StreamItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.version = Versions.findByValue(iprot.readI32());
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.doc_id = iprot.readString();
        struct.setDoc_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.abs_url = iprot.readBinary();
        struct.setAbs_urlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.schost = iprot.readString();
        struct.setSchostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.original_url = iprot.readBinary();
        struct.setOriginal_urlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.body = new ContentItem();
        struct.body.read(iprot);
        struct.setBodyIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map227 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.source_metadata = new HashMap<String,ByteBuffer>(2*_map227.size);
          for (int _i228 = 0; _i228 < _map227.size; ++_i228)
          {
            String _key229;
            ByteBuffer _val230;
            _key229 = iprot.readString();
            _val230 = iprot.readBinary();
            struct.source_metadata.put(_key229, _val230);
          }
        }
        struct.setSource_metadataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stream_id = iprot.readString();
        struct.setStream_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stream_time = new StreamTime();
        struct.stream_time.read(iprot);
        struct.setStream_timeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map231 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.other_content = new HashMap<String,ContentItem>(2*_map231.size);
          for (int _i232 = 0; _i232 < _map231.size; ++_i232)
          {
            String _key233;
            ContentItem _val234;
            _key233 = iprot.readString();
            _val234 = new ContentItem();
            _val234.read(iprot);
            struct.other_content.put(_key233, _val234);
          }
        }
        struct.setOther_contentIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TMap _map235 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.ratings = new HashMap<String,List<Rating>>(2*_map235.size);
          for (int _i236 = 0; _i236 < _map235.size; ++_i236)
          {
            String _key237;
            List<Rating> _val238;
            _key237 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val238 = new ArrayList<Rating>(_list239.size);
              for (int _i240 = 0; _i240 < _list239.size; ++_i240)
              {
                Rating _elem241;
                _elem241 = new Rating();
                _elem241.read(iprot);
                _val238.add(_elem241);
              }
            }
            struct.ratings.put(_key237, _val238);
          }
        }
        struct.setRatingsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TMap _map242 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.external_ids = new HashMap<String,Map<String,String>>(2*_map242.size);
          for (int _i243 = 0; _i243 < _map242.size; ++_i243)
          {
            String _key244;
            Map<String,String> _val245;
            _key244 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map246 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val245 = new HashMap<String,String>(2*_map246.size);
              for (int _i247 = 0; _i247 < _map246.size; ++_i247)
              {
                String _key248;
                String _val249;
                _key248 = iprot.readString();
                _val249 = iprot.readString();
                _val245.put(_key248, _val249);
              }
            }
            struct.external_ids.put(_key244, _val245);
          }
        }
        struct.setExternal_idsIsSet(true);
      }
    }
  }

}

